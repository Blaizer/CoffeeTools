--- original/gml_GlobalScript_scrFFrame.gml
+++ patched/gml_GlobalScript_scrFFrame.gml
@@ -6,5 +6,5 @@
     }
     var fframe = instance_create(x, y, oFFrame);
     fframe.fSpeed = game_get_speed(gamespeed_fps);
-    game_set_speed(arg0, gamespeed_fps);
+    game_set_speed((arg0 * global.STANDARD_FPS) / 60, gamespeed_fps);
 }
--- original/gml_GlobalScript_scrGetInput.gml
+++ patched/gml_GlobalScript_scrGetInput.gml
@@ -5,6 +5,7 @@
     if (global.playbackMode && is_array(global.inputPlayback) && instance_exists(oGame))
     {
         pressStart = keyboard_check_pressed(global.keyMap[_player][global.INP_START]) || gamepad_button_check_pressed(_slot, global.joyMap[_player][global.INP_START]) || keyboard_check_pressed(vk_escape);
+        applyTasInputs(_player, global.INPUT_FRAME);
         if (pressStart)
         {
             global.inputFrame--;
@@ -17,14 +18,14 @@
     holdDown = keyboard_check(global.keyMap[_player][global.INP_DOWN]);
     holdLeft = keyboard_check(global.keyMap[_player][global.INP_LEFT]);
     holdRight = keyboard_check(global.keyMap[_player][global.INP_RIGHT]);
-    pressUp = keyboard_check_pressed(global.keyMap[_player][global.INP_UP]);
-    pressDown = keyboard_check_pressed(global.keyMap[_player][global.INP_DOWN]);
-    pressLeft = keyboard_check_pressed(global.keyMap[_player][global.INP_LEFT]);
-    pressRight = keyboard_check_pressed(global.keyMap[_player][global.INP_RIGHT]);
-    releaseUp = keyboard_check_released(global.keyMap[_player][global.INP_UP]);
-    releaseDown = keyboard_check_released(global.keyMap[_player][global.INP_DOWN]);
-    releaseLeft = keyboard_check_released(global.keyMap[_player][global.INP_LEFT]);
-    releaseRight = keyboard_check_released(global.keyMap[_player][global.INP_RIGHT]);
+    pressUp = keyboard_check_pressed_verify(_player, global.INP_UP);
+    pressDown = keyboard_check_pressed_verify(_player, global.INP_DOWN);
+    pressLeft = keyboard_check_pressed_verify(_player, global.INP_LEFT);
+    pressRight = keyboard_check_pressed_verify(_player, global.INP_RIGHT);
+    releaseUp = keyboard_check_released_verify(_player, global.INP_UP);
+    releaseDown = keyboard_check_released_verify(_player, global.INP_DOWN);
+    releaseLeft = keyboard_check_released_verify(_player, global.INP_LEFT);
+    releaseRight = keyboard_check_released_verify(_player, global.INP_RIGHT);
     var padCount = gamepad_get_device_count();
     if (padCount > 0)
     {
@@ -99,35 +100,35 @@
         {
             holdRight = 1;
         }
-        if (gamepad_button_check_pressed(_slot, global.joyMap[_player][global.INP_UP]))
+        if (gamepad_button_check_pressed_verify(_slot, _player, global.INP_UP))
         {
             pressUp = 1;
         }
-        if (gamepad_button_check_pressed(_slot, global.joyMap[_player][global.INP_DOWN]))
+        if (gamepad_button_check_pressed_verify(_slot, _player, global.INP_DOWN))
         {
             pressDown = 1;
         }
-        if (gamepad_button_check_pressed(_slot, global.joyMap[_player][global.INP_LEFT]))
+        if (gamepad_button_check_pressed_verify(_slot, _player, global.INP_LEFT))
         {
             pressLeft = 1;
         }
-        if (gamepad_button_check_pressed(_slot, global.joyMap[_player][global.INP_RIGHT]))
+        if (gamepad_button_check_pressed_verify(_slot, _player, global.INP_RIGHT))
         {
             pressRight = 1;
         }
-        if (gamepad_button_check_released(_slot, global.joyMap[_player][global.INP_UP]))
+        if (gamepad_button_check_released_verify(_slot, _player, global.INP_UP))
         {
             releaseUp = 1;
         }
-        if (gamepad_button_check_released(_slot, global.joyMap[_player][global.INP_DOWN]))
+        if (gamepad_button_check_released_verify(_slot, _player, global.INP_DOWN))
         {
             releaseDown = 1;
         }
-        if (gamepad_button_check_released(_slot, global.joyMap[_player][global.INP_LEFT]))
+        if (gamepad_button_check_released_verify(_slot, _player, global.INP_LEFT))
         {
             releaseLeft = 1;
         }
-        if (gamepad_button_check_released(_slot, global.joyMap[_player][global.INP_RIGHT]))
+        if (gamepad_button_check_released_verify(_slot, _player, global.INP_RIGHT))
         {
             releaseRight = 1;
         }
@@ -136,19 +137,19 @@
     {
         fire1 = keyboard_check(global.keyMap[_player][global.INP_FIRE1]) || gamepad_button_check(_slot, global.joyMap[_player][global.INP_FIRE1]);
         fire2 = keyboard_check(global.keyMap[_player][global.INP_FIRE2]) || gamepad_button_check(_slot, global.joyMap[_player][global.INP_FIRE2]);
-        fire1pressed = keyboard_check_pressed(global.keyMap[_player][global.INP_FIRE1]) || gamepad_button_check_pressed(_slot, global.joyMap[_player][global.INP_FIRE1]);
-        fire2pressed = keyboard_check_pressed(global.keyMap[_player][global.INP_FIRE2]) || gamepad_button_check_pressed(_slot, global.joyMap[_player][global.INP_FIRE2]);
-        fire1released = keyboard_check_released(global.keyMap[_player][global.INP_FIRE1]) || gamepad_button_check_released(_slot, global.joyMap[_player][global.INP_FIRE1]);
-        fire2released = keyboard_check_released(global.keyMap[_player][global.INP_FIRE2]) || gamepad_button_check_released(_slot, global.joyMap[_player][global.INP_FIRE2]);
+        fire1pressed = keyboard_check_pressed_verify(_player, global.INP_FIRE1) || gamepad_button_check_pressed_verify(_slot, _player, global.INP_FIRE1);
+        fire2pressed = keyboard_check_pressed_verify(_player, global.INP_FIRE2) || gamepad_button_check_pressed_verify(_slot, _player, global.INP_FIRE2);
+        fire1released = keyboard_check_released_verify(_player, global.INP_FIRE1) || gamepad_button_check_released_verify(_slot, _player, global.INP_FIRE1);
+        fire2released = keyboard_check_released_verify(_player, global.INP_FIRE2) || gamepad_button_check_released_verify(_slot, _player, global.INP_FIRE2);
     }
     else
     {
         fire1 = keyboard_check(global.keyMap[_player][global.INP_FIRE1]) || gamepad_button_check(_slot, gp_face2) || gamepad_button_check(_slot, gp_face3);
         fire2 = keyboard_check(global.keyMap[_player][global.INP_FIRE2]) || gamepad_button_check(_slot, gp_face1) || gamepad_button_check(_slot, gp_face4);
-        fire1pressed = keyboard_check_pressed(global.keyMap[_player][global.INP_FIRE1]) || gamepad_button_check_pressed(_slot, gp_face2) || gamepad_button_check_pressed(_slot, gp_face3);
-        fire2pressed = keyboard_check_pressed(global.keyMap[_player][global.INP_FIRE2]) || gamepad_button_check_pressed(_slot, gp_face1) || gamepad_button_check_pressed(_slot, gp_face4);
-        fire1released = keyboard_check_released(global.keyMap[_player][global.INP_FIRE1]) || gamepad_button_check_released(_slot, gp_face2) || gamepad_button_check_released(_slot, gp_face3);
-        fire2released = keyboard_check_released(global.keyMap[_player][global.INP_FIRE2]) || gamepad_button_check_released(_slot, gp_face1) || gamepad_button_check_released(_slot, gp_face4);
+        fire1pressed = keyboard_check_pressed_verify(_player, global.INP_FIRE1) || gamepad_button_check_pressed_verify_2(_slot, _player, 32770, global.INP_FIRE1) || gamepad_button_check_pressed_verify_2(_slot, _player, 32771, global.INP_FIRE1 + 2);
+        fire2pressed = keyboard_check_pressed_verify(_player, global.INP_FIRE2) || gamepad_button_check_pressed_verify_2(_slot, _player, 32769, global.INP_FIRE2) || gamepad_button_check_pressed_verify_2(_slot, _player, 32772, global.INP_FIRE2 + 2);
+        fire1released = keyboard_check_released_verify(_player, global.INP_FIRE1) || gamepad_button_check_released_verify_2(_slot, _player, 32770, global.INP_FIRE1) || gamepad_button_check_released_verify_2(_slot, _player, 32771, global.INP_FIRE1 + 2);
+        fire2released = keyboard_check_released_verify(_player, global.INP_FIRE2) || gamepad_button_check_released_verify_2(_slot, _player, 32769, global.INP_FIRE2) || gamepad_button_check_released_verify_2(_slot, _player, 32772, global.INP_FIRE2 + 2);
     }
     pressStart = keyboard_check_pressed(global.keyMap[_player][global.INP_START]) || gamepad_button_check_pressed(_slot, global.joyMap[_player][global.INP_START]) || keyboard_check_pressed(vk_escape);
     if (holdLeft && holdRight)
@@ -190,4 +191,5 @@
     {
         global.inputFocus = 2;
     }
+    applyTasInputs(_player, global.INPUT_FRAME);
 }
--- original/gml_GlobalScript_scrPause.gml
+++ patched/gml_GlobalScript_scrPause.gml
@@ -6,6 +6,8 @@
     }
     global.paused = true;
     global.prePauseFont = global.currFont;
+    global.prePauseFPS = game_get_speed(gamespeed_fps);
+    display_reset(0, true);
     game_set_speed(60, gamespeed_fps);
     scrSaveTimePlayed();
     if (audio_exists(global.SFX))
--- original/gml_GlobalScript_scrPlayGame.gml
+++ patched/gml_GlobalScript_scrPlayGame.gml
@@ -23,7 +23,10 @@
     scrTexturegroupChange(global.TEXTUREGROUP[0], global.TEXTUREGROUP[global.currGameID]);
     scrOpenCurrFile();
     var playCount = scrReadRealManual(0, "gameRunCount" + string(global.currGameID), 0);
+    if (!global.CT_BlockSaves)
+    {
     scrWriteRealManual(0, "gameRunCount" + string(global.currGameID), playCount + 1);
+    }
     global.currWin = scrReadRealManual(0, "gameWin" + string(global.currGameID), 0);
     global.currGardenWin = scrReadRealManual(0, "gardenWin" + string(global.currGameID), 0);
     scrCloseCurrFile();
--- original/gml_GlobalScript_scrRandomize.gml
+++ patched/gml_GlobalScript_scrRandomize.gml
@@ -6,7 +6,22 @@
     }
     else
     {
+        if (global.RANDOMIZE_INDEX < array_length(global.CT_RANDOMIZE_TABLE))
+        {
+            if (global.CT_RANDOMIZE_TABLE[global.RANDOMIZE_INDEX][0] != global.INPUT_FRAME)
+            {
+                show_message("Desync Detected!\n\nExpected randomize() on input frame " + string(global.CT_RANDOMIZE_TABLE[global.RANDOMIZE_INDEX][0]) + " but got it on frame " + string(global.INPUT_FRAME));
+            }
+        }
+        else
+        {
+            if (global.RANDOMIZE_INDEX != array_length(global.CT_RANDOMIZE_TABLE))
+            {
+                show_message("Something went wrong with randomize(). TAS will probably desync");
+            }
         randomize();
-        rng_seed(random(99999999));
+            array_push(global.CT_RANDOMIZE_TABLE, [global.INPUT_FRAME, random(99999999)]);
+        }
+        rng_seed(global.CT_RANDOMIZE_TABLE[global.RANDOMIZE_INDEX++][1]);
     }
 }
--- original/gml_GlobalScript_scrSaveGame.gml
+++ patched/gml_GlobalScript_scrSaveGame.gml
@@ -12,6 +12,10 @@
     {
         return false;
     }
+    if (global.CT_BlockSaves == true)
+    {
+        return false;
+    }
     scrOpenCurrFile();
     var saveSuccess = false;
     if (script_exists(global.mGameSaveScript[global.currGame]))
--- original/gml_GlobalScript_scrSaveTimePlayed.gml
+++ patched/gml_GlobalScript_scrSaveTimePlayed.gml
@@ -4,6 +4,10 @@
     {
         return false;
     }
+    if (global.CT_BlockSaves)
+    {
+        return false;
+    }
     scrOpenCurrFile();
     var milsNew = current_time - global.timeStamp;
     var milsPrev = scrReadRealManual(0, "timeSum", 0);
--- original/gml_GlobalScript_scrScaleDisplay.gml
+++ patched/gml_GlobalScript_scrScaleDisplay.gml
@@ -9,6 +9,13 @@
         screenHeight = min(global.SCREEN_HEIGHT * _scale, display_get_height());
         screenX = (_dwidth * 0.5) - (screenWidth * 0.5);
         screenY = (_dheight * 0.5) - (screenHeight * 0.5);
+        if (ct_in_runloop())
+        {
+            screenWidth = (screenWidth / display_get_width()) * global.SCREEN_WIDTH * _scale;
+            screenHeight = (screenHeight / display_get_width()) * global.SCREEN_WIDTH * _scale;
+            screenX = (screenX / display_get_width()) * global.SCREEN_WIDTH * _scale;
+            screenY = (screenY / display_get_width()) * global.SCREEN_WIDTH * _scale;
+        }
     }
     else
     {
--- original/gml_GlobalScript_scrUnpause.gml
+++ patched/gml_GlobalScript_scrUnpause.gml
@@ -5,6 +5,11 @@
         exit;
     }
     global.paused = false;
+    if (global.prePauseFPS > 60)
+    {
+        display_reset(0, false);
+    }
+    game_set_speed(global.prePauseFPS, gamespeed_fps);
     scrSetFont(global.prePauseFont);
     if (audio_exists(global.SFX))
     {
--- original/gml_GlobalScript_scrWin.gml
+++ patched/gml_GlobalScript_scrWin.gml
@@ -16,6 +16,10 @@
     {
         return false;
     }
+    if (global.CT_BlockSaves)
+    {
+        return false;
+    }
     scrOpenCurrFile();
     if (arg0 == global.CHERRY_WIN)
     {
--- original/gml_Object_oHighscore_Step_0.gml
+++ patched/gml_Object_oHighscore_Step_0.gml
@@ -252,7 +252,7 @@
 }
 if (state == 1)
 {
-    if (newScore[0] > hstable[9][1] || newScore[1] > hstable[9][1])
+    if ((newScore[0] > hstable[9][1] || newScore[1] > hstable[9][1]) && !global.CT_BlockSaves)
     {
         for (var i = 0; i < 2; i++)
         {
--- original/gml_Object_oLibrary_Other_11.gml
+++ patched/gml_Object_oLibrary_Other_11.gml
@@ -23,6 +23,7 @@
 }
 else if (substate == SUB_EXIT)
 {
+    global.CT_DisplayInputs = true;
     scrTexturegroupChange(-1, global.TEXTUREGROUP[52]);
     scrSwitchState(STATE_INTRO);
 }
--- original/gml_Object_oLibrary_Other_12.gml
+++ patched/gml_Object_oLibrary_Other_12.gml
@@ -312,7 +312,7 @@
             }
             break;
     }
-    if ((fire2pressed || pressStart || keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter)) && (INTRO_TIME > 10 || INTRO_SCENE > 1))
+    if ((fire2pressed || pressStart) && (INTRO_TIME > 10 || INTRO_SCENE > 1))
     {
         if (INTRO_SCENE < 24)
         {
--- original/gml_Object_oScreenHandler_Create_0.gml
+++ patched/gml_Object_oScreenHandler_Create_0.gml
@@ -10,3 +10,44 @@
 pal_bright = 1;
 pal_bright_target = 1;
 do_screen = false;
+global.CT_DisplayInputs = false;
+global.CT_DisplayP2Inputs = false;
+multiPressed = [[0, 0], [0, 0]];
+multiPressedState = [[0, 0], [0, 0]];
+global.CT_MsgText = "";
+global.CT_MessageTimer = 0;
+global.CT_MessageTimer2 = 0;
+frameAdvanceSurface = -1;
+global.CT_BlockSaves = false;
+global.CT_FeedbackMessages = true;
+global.CT_TARGET_FPS = 60;
+global.prePauseFPS = 60;
+global.FRAME_COUNT = 0;
+global.CT_ShowFrameCounter = false;
+global.CT_INPUTS = array_create(0);
+global.CT_INPUTS_LENGTH = array_length(global.CT_INPUTS);
+global.CT_RANDOMIZE_TABLE = array_create(0);
+if (file_exists("coffeetools/play.ctas"))
+{
+    readTasFile("coffeetools/play.ctas");
+    global.CT_ShowTasFrameCounter = true;
+}
+else
+{
+    global.CT_ShowTasFrameCounter = false;
+}
+global.INPUT_FRAME = 0;
+global.RANDOMIZE_INDEX = 0;
+global.CT_KEY_AUTO_REPEAT = array_create(256);
+global.CT_FixIncongruentInputsFrame = false;
+global.PreviousFrameInputs = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
+debugScreen = 0;
+debugCursorX = 0;
+debugCursorY = 0;
+debugDSType = 5;
+debugDSID = 0;
+debugDSOffsetX = 0;
+debugDSOffsetY = 0;
+debugDSOffsetWidth = 0;
+debugDSStackQueueRead = "";
+global.betaVersion += (" - CoffeeTools v" + extension_get_version("CoffeeTools"));
--- original/gml_Object_oScreenHandler_Draw_75.gml
+++ patched/gml_Object_oScreenHandler_Draw_75.gml
@@ -1,3 +1,7 @@
+if (!ct_init())
+{
+    show_error("CoffeeTools.dll failed to load.\nMake sure you copied CoffeeTools.dll into the same folder as data.win.", false);
+}
 if (!global.canDoShaders)
 {
     exit;
@@ -8,6 +12,88 @@
 {
     display_set_gui_maximize(1, 1, 0, 0);
 }
+surface_set_target(application_surface);
+if ((global.CT_INPUTS_LENGTH > 0 && (global.INPUT_FRAME + 1) == global.CT_INPUTS_LENGTH) && false)
+{
+    global.CT_MsgText = "INPUT PLAYBACK ENDED";
+    global.CT_MessageTimer = current_time + 2000;
+}
+else if ((global.CT_INPUTS_LENGTH > 0 && global.INPUT_FRAME == 0) && false)
+{
+    global.CT_MsgText = "INPUT PLAYBACK STARTED";
+    global.CT_MessageTimer = current_time + 2000;
+}
+for (var i = 0; i < 2; i++)
+{
+    scrGetInput(i);
+    trackPresses(i, 0, fire2pressed);
+    trackPresses(i, 1, fire1pressed);
+    if (global.CT_DisplayInputs)
+    {
+        if (i == 0)
+        {
+            if (pressStart)
+            {
+                draw_sprite_ext(sVirtualInputs, 6, 32, 192, 1, 1, 0, global.palette[0], 1);
+            }
+            else
+            {
+                draw_sprite_ext(sVirtualInputs, 6, 32, 192, 1, 1, 0, global.palette[16], 1);
+            }
+        }
+        if (global.CT_DisplayP2Inputs || i == 0)
+        {
+            drawKey(0, 16 + (48 * i), 192, holdUp, pressUp, releaseUp);
+            drawKey(3, 8 + (48 * i), 200, holdLeft, pressLeft, releaseLeft);
+            drawKey(2, 16 + (48 * i), 200, holdDown, pressDown, releaseDown);
+            drawKey(1, 24 + (48 * i), 200, holdRight, pressRight, releaseRight);
+            drawKey(5, 32 + (48 * i), 200, fire2, fire2pressed, fire2released);
+            drawKey(4, 40 + (48 * i), 200, fire1, fire1pressed, fire1released);
+            if (multiPressedState[i][0] != 0)
+            {
+                draw_sprite(sMultiPressed, multiPressed[i][0] - 1, 32 + (48 * i), 208);
+            }
+            if (multiPressedState[i][1] != 0)
+            {
+                draw_sprite(sMultiPressed, multiPressed[i][1] - 1, 40 + (48 * i), 208);
+            }
+        }
+    }
+}
+global.CT_FixIncongruentInputsFrame = false;
+global.PreviousFrameInputs = [[], []];
+for (var i = 0; i < 2; i++)
+{
+    array_push(global.PreviousFrameInputs[i], keyboard_check(global.keyMap[i][global.INP_UP]));
+    array_push(global.PreviousFrameInputs[i], keyboard_check(global.keyMap[i][global.INP_DOWN]));
+    array_push(global.PreviousFrameInputs[i], keyboard_check(global.keyMap[i][global.INP_LEFT]));
+    array_push(global.PreviousFrameInputs[i], keyboard_check(global.keyMap[i][global.INP_RIGHT]));
+    array_push(global.PreviousFrameInputs[i], keyboard_check(global.keyMap[i][global.INP_FIRE1]));
+    array_push(global.PreviousFrameInputs[i], keyboard_check(global.keyMap[i][global.INP_FIRE2]));
+    array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], global.joyMap[i][global.INP_UP]));
+    array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], global.joyMap[i][global.INP_DOWN]));
+    array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], global.joyMap[i][global.INP_LEFT]));
+    array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], global.joyMap[i][global.INP_RIGHT]));
+    if (!global.doubledUpButtons[i])
+    {
+        array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], global.joyMap[i][global.INP_FIRE1]));
+        array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], global.joyMap[i][global.INP_FIRE2]));
+        array_push(global.PreviousFrameInputs[i], 0);
+        array_push(global.PreviousFrameInputs[i], 0);
+    }
+    else
+    {
+        array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], gp_face2));
+        array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], gp_face1));
+        array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], gp_face3));
+        array_push(global.PreviousFrameInputs[i], gamepad_button_check(global.joySlot[i], gp_face4));
+    }
+}
+surface_reset_target();
+
+function drawScreenWithToolsText()
+{
+    drawToolsText();
 var _scale = scrDrawCheckSurfaces();
 if (do_screen && surface_exists(global.bufferSurface[0]) && surface_exists(global.bufferSurface[1]))
 {
@@ -43,3 +129,13 @@
 {
     do_screen = true;
 }
+}
+
+if (!surface_exists(frameAdvanceSurface))
+{
+    frameAdvanceSurface = surface_create(global.SCREEN_WIDTH, global.SCREEN_HEIGHT);
+}
+surface_set_target(frameAdvanceSurface);
+draw_surface(application_surface, 0, 0);
+surface_reset_target();
+drawScreenWithToolsText();
--- original/gml_Object_oTitleScreens_Draw_0.gml
+++ patched/gml_Object_oTitleScreens_Draw_0.gml
@@ -1,6 +1,10 @@
 scrFontDefault();
 if (state == STATE_BLACKSCREEN)
 {
+    if (stateCounter == 30)
+    {
+        scrFFrame(6);
+    }
     scrFillScreen(0);
 }
 if (state == STATE_TITLE)
